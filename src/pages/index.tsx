import * as React from "react";

import styles from "./index.module.css";
import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import {
  Card,
  Image,
  Modal,
  Text,
  Badge,
  Button,
  Group,
  Space,
} from "@mantine/core";
import { toast } from "react-hot-toast";
import { useDisclosure } from "@mantine/hooks";

import { Fireworks } from "./components/animationEffects/Fireworks";
import { Confetti } from "./components/animationEffects/Confetti";
import { AddGoalForm } from "./components/Forms/AddGoalForm";
import { EditGoalForm } from "./components/Forms/EditGoalForm";
import { goal1, goal2, goal3, goal4 } from "./constants/goals";

import { api } from "~/utils/api";

const Home: NextPage = () => {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });
  //const all = api.example.getAll.useQuery();

  const goals = api.goals.getAll.useQuery();
  const createGoalMutation = api.goals.addGoal.useMutation();
  const deleteGoalMutation = api.goals.deleteGoal.useMutation();
  const editGoalMutation = api.goals.editGoal.useMutation();

  const [createFormOpened, { open: createFormOpen, close: createFormClose }] =
    useDisclosure(false);

  const [openedGoals, setOpenedGoals] = React.useState<string[]>([]);

  const openGoalModal = (goalId: string) => {
    setOpenedGoals((prevOpenedGoals) => [...prevOpenedGoals, goalId]);
  };

  const closeGoalModal = (goalId: string) => {
    setOpenedGoals((prevOpenedGoals) =>
      prevOpenedGoals.filter((id) => id !== goalId)
    );
  };
  const ctx = api.useContext();

  const [showAnimation, setShowAnimation] = React.useState<
    "fireworks" | "confetti" | null
  >(null);

  return (
    <>
      <Head>
        <title>Create T3 App for Mia</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.container}>
          {showAnimation === "fireworks" && <Fireworks />}
          {showAnimation === "confetti" && <Confetti />}
          {!showAnimation && <Space h="0px" />}
          <div className={styles.showcaseContainer} style={{ zIndex: 2 }}>
            {/*<p className={styles.showcaseText}>
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>*/}
            <AuthShowcase />
          </div>
          <Modal
            opened={createFormOpened}
            onClose={createFormClose}
            title="Create your goal"
          >
            <AddGoalForm close={createFormClose} />
          </Modal>

          <h1 className={styles.title} style={{ zIndex: 2 }}>
            My Goals
          </h1>
          <Button
            onClick={createFormOpen}
            variant="light"
            color="blue"
            mt="sm"
            radius="md"
            size="lg"
          >
            + Add goal
          </Button>

          <Group position="center">
            {goals?.data?.map((goal) => (
              <div style={{ minWidth: "400px" }} key={goal.id}>
                <Card
                  shadow="sm"
                  padding="lg"
                  radius="md"
                  withBorder
                  key={goal.id}
                  style={{ minWidth: "200px" }}
                >
                  <Card.Section>
                    <Image src={goal.image} height={160} alt={goal.name} />
                  </Card.Section>
                  <Group position="apart" mt="md" mb="xs">
                    <Text weight={500}>{goal.name}</Text>
                    <Badge
                      color={goal.completion === 100 ? "green" : "orange"}
                      variant="light"
                    >
                      Progress: {goal.completion} %
                    </Badge>
                  </Group>
                  <Text size="sm" color="dimmed">
                    {goal.description}
                    {goal.description === undefined ||
                      (goal.description === "" && <Space h="lg" />)}
                  </Text>
                  <Modal
                    opened={openedGoals.includes(goal.id)}
                    onClose={() => closeGoalModal(goal.id)}
                    title="Edit goal"
                  >
                    <EditGoalForm
                      close={() => closeGoalModal(goal.id)}
                      // @ts-ignore-next-line
                      goal={goal}
                    />
                  </Modal>
                  <Group position="apart">
                    <Button
                      variant="light"
                      color="blue"
                      mt="sm"
                      radius="md"
                      size="xs"
                      onClick={() => openGoalModal(goal.id)}
                    >
                      ‚úé Edit
                    </Button>

                    <Button
                      variant="light"
                      color="green"
                      mt="md"
                      radius="md"
                      size="xs"
                      onClick={() => {
                        editGoalMutation.mutate(
                          {
                            id: goal.id,
                            completion: 100,
                          },
                          {
                            onSuccess: () => {
                              const randomComponent =
                                Math.random() < 0.5 ? "fireworks" : "confetti";
                              toast.success(
                                "Successfully completed your goal."
                              );

                              setShowAnimation(randomComponent);
                              setTimeout(() => {
                                setShowAnimation(null);
                              }, 5000);

                              void ctx.goals.getAll.invalidate();
                            },
                            onError: () => {
                              toast.error("Failed to complete goal.");
                            },
                          }
                        );
                      }}
                    >
                      ‚úÖ Complete
                    </Button>
                    <Button
                      variant="light"
                      color="red"
                      mt="md"
                      radius="md"
                      size="xs"
                      onClick={() => {
                        deleteGoalMutation.mutate(
                          { id: goal.id },
                          {
                            onSuccess: () => {
                              toast.success("Successfully deleted your goal.");
                              void ctx.goals.getAll.invalidate();
                            },
                            onError: () => {
                              toast.error("Failed to delete goal.");
                            },
                          }
                        );
                      }}
                    >
                      üóëÔ∏è Delete
                    </Button>
                  </Group>
                </Card>
              </div>
            ))}
          </Group>
          <Group>
            <Button
              variant="light"
              color="green"
              mt="md"
              radius="md"
              size="sm"
              onClick={() => {
                createGoalMutation.mutate(goal1);
              }}
            >
              Add Goal 1
            </Button>
            <Button
              variant="light"
              color="green"
              mt="md"
              radius="md"
              size="sm"
              onClick={() => {
                createGoalMutation.mutate(goal2);
              }}
            >
              Add Goal 2
            </Button>
            <Button
              variant="light"
              color="green"
              mt="md"
              radius="md"
              size="sm"
              onClick={() => {
                createGoalMutation.mutate(goal3);
              }}
            >
              Add Goal 3
            </Button>
            <Button
              variant="light"
              color="green"
              mt="md"
              radius="md"
              size="sm"
              onClick={() => {
                createGoalMutation.mutate(goal4);
              }}
            >
              Add Goal 4
            </Button>
          </Group>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className={styles.authContainer}>
      <p className={styles.showcaseText}>
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {sessionData && <span> with user id. {sessionData.user?.id}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className={styles.loginButton}
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
